To generate an Andromeda Protocol application that fulfills your request for an NFT marketplace that mints a collection of 100 NFTs and lists each at a fixed price using `ustars` as the purchasing token, we would use both the CW721 component for minting and the Marketplace component for sales. Below is the schema for such an application:

```json
{
  "CW721Component": {
    "InstantiateMsg": {
      "name": "My NFT Collection",
      "symbol": "NFT",
      "minter": "your_minter_address",
      "kernel_address": "your_kernel_address",
      "owner": "your_owner_address"
    },
    "ExecuteMsg": {
      "batch_mint": {
        "tokens": [
          {
            "token_id": "1",
            "owner": "your_owner_address",
            "token_uri": "https://gateway.pinata.cloud/ipfs/...1",
            "extension": {
              "publisher": "Your Publisher"
            }
          },
          {
            "token_id": "2",
            "owner": "your_owner_address",
            "token_uri": "https://gateway.pinata.cloud/ipfs/...2",
            "extension": {
              "publisher": "Your Publisher"
            }
          },
          // ...add 98 more NFTs for a total of 100...
          {
            "token_id": "100",
            "owner": "your_owner_address",
            "token_uri": "https://gateway.pinata.cloud/ipfs/...100",
            "extension": {
              "publisher": "Your Publisher"
            }
          }
        ]
      }
    }
  },
  "MarketplaceComponent": {
    "InstantiateMsg": {
      "kernel_address": "your_kernel_address",
      "owner": "your_owner_address"
    },
    "ExecuteMsg": {
      "receive_nft": {
        "sender": "your_owner_address",
        "token_id": "1",
        "msg": "base64_encoded_msg_for_sale_1"
      },
      // Create base64 encoded messages for each NFT sale...
      "update_sale": {
        "token_id": "1",
        "token_address": "your_token_address",
        "price": "100000",
        "coin_denom": {
          "native_token": "ustars"
        },
        "recipient": {
          "address": "your_seller_wallet_address"
        },
        "start_time": "current_time_unix_timestamp",
        "end_time": "current_time_plus_2_hours_unix_timestamp"
      }
      // Repeat this block for each NFT (1 to 100) to set sale for each
    }
  }
}
```

### Explanation

1. **CW721 Component**:
   - **InstantiateMsg**: Define the NFT collection's name, symbol, minter, kernel address, and owner.
   - **ExecuteMsg**: Use the `batch_mint` method to mint 100 NFTs. Replace `"your_owner_address"` with the address of the collection owner. Similarly, include proper IPFS URIs for each NFT's metadata.

2. **Marketplace Component**:
   - **InstantiateMsg**: Initialize the marketplace with your kernel address and owner address.
   - **ExecuteMsg**: Use the `receive_nft` to initiate the sale of each NFT by sending it to the marketplace. Encoded messages that detail the sale specifications (e.g., price and duration) are needed.
   - Use `update_sale` to specify each NFT's price as `100000` ustars and set the sale duration to 2 hours from the start (convert current and end times to Unix timestamps).

Remember to replace placeholder values, such as `your_minter_address`, `your_kernel_address`, `your_token_address`, `your_owner_address`, and `your_seller_wallet_address`, with actual addresses and values according to your specific setup. Also, ensure the correct inclusion of IPFS URIs for NFT metadata and base64 encoding for sale messages. The timestamps for sale start and end should match your intended timing for the marketplace activity.