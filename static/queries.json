{
	"nft_marketplace": [
		"I want to create a new NFT marketplace that lets me mint a collection of 100 NFTs and list each at a fixed price. Please generate an Andromeda Protocol application that includes a CW721 component for minting the NFTs and a Marketplace component to sell them. The purchasing token should be the native token `ustars`, and each NFT should be sold for `100000` `ustars`. Make sure the sale duration is 2 hours for each NFT.",
		"Build an Andromeda app with a CW721 contract to batch mint 5 NFTs. Then, add a Marketplace component that starts a sale on each minted NFT automatically, so they’re listed the moment they exist. Use native tokens only, with no CW20 tokens allowed.",
		"I need a marketplace for my NFT collection on Stargaze. The sale type must allow both native tokens and a specific CW20 token. Generate the relevant components in the Andromeda Protocol builder. Include a CW721 for the NFT collection, and a Marketplace component that authorizes only my custom CW20 token. The sale should begin as soon as each NFT is transferred to the marketplace, with a set price of `500000` `ustars`.",
		"Create an Andromeda app that mints 3 NFTs via batch mint. For each minted token, start a sale through the marketplace. Use `ustars` as the accepted currency and set the duration to 1 hour. Leave the price field empty so I can manually edit it for each NFT later.",
		"Generate a contract using Andromeda Protocol that includes a CW721 for minting a limited run of NFTs—only 10 total. Then, configure a Marketplace component so that if someone buys an NFT, the funds go to a different recipient address (not the minter). Make sure sales start immediately after each NFT is sent to the marketplace.",
		"I want an Andromeda app where I can switch between native `ustars` tokens and my `CW20` token for purchases. The CW721 collection should allow a maximum of 50 minted NFTs. The marketplace contract should be configured to automatically list the NFTs for a price of `200000` `ustars`. Include an option to change that price down the line without re-deploying the entire app.",
		"Set up an Andromeda Protocol marketplace with modules disabled (to match the current state of the system). The CW721 contract should let me mint each NFT individually rather than batch mint. Once minted, I want to send them to the marketplace for sale at `100000` `ustars` each, no time limit on the listing. Please generate all the relevant messages for me.",
		"Create a minimal Andromeda app that only does three things: 1) Mints a single NFT, 2) Transfers that NFT to the marketplace with an immediate start time, 3) Sets a fixed price of `75000` `ustars`. Provide the execute messages I need to publish and interact with the contracts after deployment.",
		"Generate a full Andromeda Protocol project to host an NFT sale with a short 30-minute sale duration. Mint 4 NFTs using the CW721 batch mint, then automatically list each of them on the marketplace at `50000` `ustars`. Ensure that the proceeds from each sale go directly to my wallet address as soon as the sale is completed.",
		"I need an Andromeda marketplace that’s compatible with both native and CW20 tokens, but I want to restrict purchases to my custom `cw20_ando` token. Include a CW721 module to batch mint 5 NFTs. Set each NFT’s sale to start immediately, last for 24 hours, and cost `1000` `cw20_ando` tokens. Provide all deployment and interaction steps so I can replicate it easily."
	],
	"crowdfund": [
		"Hi! I want to build a Crowdfund app that sells NFTs to raise funds for my project. Could you create a Crowdfund component, a CW721 component to mint the NFTs, and a Splitter that splits funds 80/20 between two addresses once the sale ends?",
		"I need a Crowdfund app named ‘MyCoolNFTSale.’ It should mint NFTs via a CW721 component called ‘Crowdfund-NFTs.’ The Crowdfund will run for 2 weeks, then send 80% of the funds to address A, 20% to address B. Please generate all necessary Andromeda ADO configurations.",
		"Please configure an app that has a CW721 component with a Crowdfund component as the sole minter. The Crowdfund should only allow 5 tokens per wallet, and automatically split funds to two addresses, 80/20, when the sale ends. Generate the Andromeda contracts.",
		"I want a Crowdfund that mints 50 NFTs, sells them at 100 ustars each, requires a minimum of 25 NFTs sold, and if that isn’t reached, refunds the buyers and burns unsold NFTs. Then use a Splitter so that after a successful sale, 80% of funds go to me and 20% go to a community wallet.",
		"Generate a Crowdfund + CW721 + Splitter setup. Show me how to attach the ‘Send’ message for the Splitter so that it automatically splits to two addresses at sale end. Let’s name the splitter ‘splitter-1.’",
		"I want to allow the Crowdfund to mint additional NFTs even after the sale ends. Please create the Andromeda Crowdfund with a CW721 where ‘Mint after sale allowed?’ is true, and any funds from subsequent minting still flow to the Splitter for an 80/20 split.",
		"Build me an Andromeda Crowdfund that starts tomorrow at 9:00 AM and ends in 7 days, selling NFTs from a CW721 component. When ended, it should automatically send funds to a Splitter that distributes 80% to address X and 20% to address Y.",
		"Set up a Crowdfund with a CW721 for minting NFTs in multiple batches (up to 100 at a time). Once minted, they’re owned by the Crowdfund. The sale requires 10 tokens to be sold to succeed. After the sale, the Splitter splits the funds 80/20. Provide the final app config.",
		"Please provide an all-in-one configuration script that includes a CW721 NFT contract, a Crowdfund contract, and a Splitter for an 80/20 funds split. Include step-by-step instructions on how to publish and then mint NFTs, start the sale, and end it.",
		"Create a Crowdfund with a CW721 named ‘ArtCrowdfundNFTs’ and a splitter named ‘ArtSplitter.’ The Crowdfund should limit each wallet to 2 NFTs and require at least 100 minted for success. Funds then go to the Splitter with a 80/20 distribution. Generate the complete Andromeda JSON."
	],
	"cw20_exchange": [
		"Create a new app with a CW20 component. Name the token ‘MyProjectToken’, use symbol ‘MPT’, and set the decimal places to 0. I want to be the minter with no cap on the total supply.",
		"I’d like to mint 10,000 additional tokens of MyProjectToken and send them to my connected wallet. Then, verify my updated token balance.",
		"Add an exchange component for MyProjectToken that allows users to purchase the token with native uandr. The sale should begin immediately, with a rate of 1 CW20 token for 10 uandr, and the proceeds of the sale go to my wallet.",
		"Extend the existing CW20 exchange so that it ends in exactly one day (86400000 ms). Make sure all unsold tokens after this duration remain in the exchange contract for now.",
		"Demonstrate how a user can buy 100 tokens of MyProjectToken at 10 uandr each, attaching the necessary funds. Make sure the purchased tokens go to that user’s wallet address.",
		"Revise the CW20 token so it includes a total mint cap of 100,000 tokens. My address remains the only minter. Show me how to confirm that total supply never exceeds 100,000.",
		"Update the CW20 token to include marketing info: name it ‘GalaxyToken,’ give it a short description, and add a placeholder logo URL. No new tokens are minted yet—just set up marketing details.",
		"Mint 1,000 tokens to my address and 500 tokens to a partner address in a single transaction. Then provide a query command to confirm balances for both addresses.",
		"Update the ongoing sale so that 1 token costs 5 uandr now. Show how to reconfigure the exchange contract to lower the exchange rate without ending the current sale.",
		"Set up a second CW20 token named ‘SideToken’ with symbol ‘SID.’ Then configure an exchange so that users can buy ‘MyProjectToken’ by paying in ‘SideToken’ instead of native uandr."
	],
	"auction_using_cw20_tokens": [
		"Build me an NFT Auction app that only allows holders of my custom CW20 token to place bids. The NFT collection will be minted via a CW721 component, the bidding token will be a CW20 component I’ve created, and only addresses holding at least 500 of these tokens should be allowed to participate in the auctions.",
		"I need an NFT auction app that starts as soon as the NFT is transferred. The auction end time should be set to 48 hours after the start, with a minimum bid of 100 tokens. The NFT is minted in a CW721 contract. My CW20 token must be the currency for bids, and only the token’s holders can join the bidding process.",
		"Create a new Auction component that requires bidders to hold a threshold of two different CW20 tokens. A user must hold at least 100 of Token A and 50 of Token B to place a bid. The NFT is minted via a CW721 component named ‘CollectionX.’ Use the Auction ID 1 for the first item. End time is seven days from now.",
		"Set up a contract that batch-mints five NFTs via a CW721 component. Then, automatically list all five in an auction using a CW20 token as payment. Minimum bid is 250 tokens, and the end time for each auction is 72 hours after listing. Make sure to send any sale proceeds back to the NFT minter.",
		"Construct an Auction application where the minter can create different auctions with varying minimum bids. For example, NFT #1 starts bidding at 250 CW20 tokens, while NFT #2 starts at 500 tokens. The auctions should begin immediately but have different end times (one ends in 3 days, the other in 5). Only addresses holding my specialized CW20 token can bid.",
		"I want an NFT Auction that starts in 24 hours and ends in 72 hours from now. The bidding currency is a CW20 token named ‘MyToken.’ The minter of the NFT (CW721) should be able to configure multiple auctions with the same start/end times, and all proceeds go to a specific address I designate as the recipient.",
		"Generate a single transaction flow that creates: A CW721 collection named ‘GoldenPass,’ A CW20 token named ‘BidToken,’ An Auction component that allows only holders of ‘BidToken’ to bid.Then automatically mint one NFT and list it in the auction with a 200-token minimum bid and no whitelist restrictions besides token ownership.",
		"Build an NFT Auction system where the original NFT creator gets a 10% royalty on every successful sale. The winning bid is paid in my CW20 token. Ensure that the Auction component automatically transfers that 10% of the winning bid to the NFT creator and the remaining 90% to the current NFT owner.",
		"I’d like an auction contract that can handle multiple NFTs being listed at once via multi-execute. Each NFT should have its own start time, end time, and minimum bid. All auctions use the same CW20 token. Showcase how to define different parameters for each listed NFT in a single multi-execute command.",
		"Design an NFT auction that restricts bids to a 2-hour window. The NFT will be minted on a CW721 contract. We’ll use my existing CW20 token for bidding. The Auction component should disallow any bids before or after the 2-hour window, and if there are no bids in that window, the NFT should remain with the seller."
	],
	"extended_marketplace": [
		"I want to create a new Andromeda Protocol application that includes a CW721 component for minting NFTs and a marketplace component for selling them, but I’d like the sales to be in ANDR tokens (uandr). Please generate the necessary configuration for deploying this App on the Andromeda chain.",
		"Add a 5% tax rate to the marketplace component so that any buyer purchasing an NFT will pay an additional 5% on top of the sale price. The revenue from this tax should be sent to a specific address for administrative costs.",
		"Configure the application so there are three artists (Artist1, Artist2, Artist3). Artist1 is the admin responsible for the CW721 and marketplace. Artist2 and Artist3 each have permission to mint exactly one NFT. Show how to define these roles in the app.",
		"Add a splitter component that automatically divides sales proceeds among the three artists when the collaborative NFT is sold. Each artist should receive 33% of the sale proceeds, and lock the splitter configuration for 30 days to avoid malicious changes before the sale is over.",
		"In the CW721 component, I need to limit the mint function to Artist2 and Artist3 exactly one time each. Generate the permissioning configuration so that these two addresses are whitelisted or given exactly one use for the mint action.",
		"Generate the mint transactions for four NFTs: one from Artist1 (admin), one from Artist2, one from Artist3, and one collaborative NFT minted by Artist1. Use these IPFS URIs for the metadata:\n- Admin NFT: https://gateway.pinata.cloud/ipfs/QmNj9dWRQVqBmNyvHbJBQsX1UrpCSUiq7REcFZ5seD9Xuj\n- Artist2 NFT: https://gateway.pinata.cloud/ipfs/QmXU5gj"
	],
	"commission_based_sales": [
		"I’m looking to create an Andromeda-based application that sells event tickets as NFTs. Each ticket sale needs to accrue funds in a Timelock until the end of each month. At that time, the Conditional Splitter should distribute commissions to my single salesperson and the remainder goes to the company. The commission percentages should scale from 10% up to 25% depending on the total sales. Can you generate the smart contract flow and configuration for this setup?",
		"I want to build a web3 ticket marketplace using a CW721 component for minting. The tickets need to be sold in uandr, with all sales routed to a Timelock that holds funds until a certain date. Upon release, the funds should go to a Conditional Splitter that checks the total amount sold by my single salesperson for the month and distributes commissions. Please provide the entire build process in steps.",
		"I have two sales representatives, each with a different commission tier. For sales under 10 ANDR, they both make 10%. Between 10 and 30 ANDR, they make 15%. Between 30 and 100 ANDR, they make 20%. Above 100 ANDR, they make 25%. I want a Timelock that releases funds on the 1st of each month to a Conditional Splitter that handles these tiers. Help me configure the ADO Builder with the CW721, Marketplace, Timelock, and Conditional Splitter.",
		"Please create a Commission Based Sales Application using the aOS. The tickets will be minted as NFTs and sold on a marketplace in uandr. The Timelock should hold funds for 2 weeks instead of 1 month, and upon expiry, funds should be released to a Conditional Splitter. The Conditional Splitter should send 15% to the salesperson if total monthly sales are under 50 ANDR, or 25% if above. Show me how to set this up.",
		"I need an Andromeda App that mints 5 NFTs to represent premium event tickets. All sales should happen in a marketplace, with proceeds locked in a Timelock for one month. At expiration, funds must go to a Conditional Splitter that sends 20% to the salesperson if sales are less than 100 ANDR, and 25% if sales exceed 100 ANDR. Please detail how to configure each component.",
		"Could you help me build a Commission Based NFT Sales application for two different events, each with its own NFT collection? The same salesperson is responsible for both collections. I want the scaling commission structure (10%, 15%, 20%, 25%) applied based on total sales of both collections combined. All proceeds go through a Timelock, then to a Conditional Splitter that calculates commissions across both NFT sets.",
		"I’m testing a single-tier commission approach for a short pilot. If my salesperson sells fewer than 50 ANDR worth of tickets, they earn 15%. If they exceed 50 ANDR, they earn 25%. The Timelock period should be just one hour for quick testing, and after that hour, funds should be automatically sent to my Conditional Splitter. How can I build and test this in the ADO Builder?",
		"I want to create a daily payout instead of monthly. My NFT ticket sales route to a Timelock that unlocks every 24 hours. When unlocked, the funds go to a Conditional Splitter, which checks total daily sales. If under 30 ANDR, the commission is 15%; if between 30 and 100 ANDR, it’s 20%; if above 100 ANDR, it’s 25%. Can you outline how to configure these time-based conditions and the scaling commission tiers?",
		"Could you walk me through how to set up an Andromeda Protocol marketplace for my NFTs such that a single salesperson gets 10% for under 10 ANDR in sales, 15% for 10–30 ANDR, 20% for 30–100 ANDR, and 25% if they exceed 100 ANDR? I also need a Timelock that releases funds after exactly 3 months to a Conditional Splitter with these tiers. Provide the JSON for the Timelock hold_funds message and the Conditional Splitter thresholds.",
		"I’m building a Commission Based Sales Application that will have multiple sales milestones. When the Timelock releases funds, the Conditional Splitter should distribute 10% for sales under 10 ANDR, 15% for 10–30, 20% for 30–100, and 25% for anything above 100 ANDR. Could you provide the step-by-step instructions, from minting NFTs via CW721, listing them on the marketplace, configuring the Timelock, and setting up the conditional logic in the Conditional Splitter?"
	],
	"vesting_and_staking": [
		"I want to create a simple vesting and staking application on the Andromeda chain. The app should lock up a certain amount of our native token for 1 year and then release it in increments. Once released, all tokens must automatically be staked in the default validator. Please generate the appropriate Vesting and Staking ADO components and show me how to configure them.",
		"Create a vesting schedule for two employees on the Andromeda chain. Each employee gets a unique Vesting ADO with a 6-month lockup. After lockup, tokens are released monthly at a rate of 10%. Once the tokens are claimed, they should automatically stake to our chosen validator. Provide the ownership transfer steps so each employee controls their own app.",
		"I need a vesting contract that supports a custom token denomination, say 'umytoken'. The vesting should lock tokens for 3 months, and then release 5% every week. When tokens are claimed, they must be staked with a specific validator address. Show me how to use the Beta ADOs for this setup.",
		"Please generate a Vesting ADO that has no lockup period but gradually releases tokens over a 12-month period at a rate of 2% every two weeks. Once claimed, the tokens go to a Staking ADO and auto-stake. I also want to retrieve staking rewards later via a 'Claim' message. Walk me through the entire app configuration.",
		"I’d like an advanced vesting schedule for an employee’s tokens on the Andromeda chain: a 1-hour lockup, followed by a 10-minute release interval for 5% each time. Once tokens are vested, they should auto-stake to the default validator. Show me how to create this using the Builder and how to attach the required funds.",
		"Generate a vesting and staking app for 50 employees, each with a different amount of tokens and different schedules. Tokens should vest in equal weekly intervals for 26 weeks. After each interval, tokens move to the Staking ADO automatically. Please detail how to manage separate ownership for each employee's contract.",
		"I want a vesting contract that splits tokens between two recipients: one portion to go directly to the employee after 6 months, and the other portion to go to a Staking ADO automatically for the same employee. How do I set up the attachments in the vesting contract and the references to multiple recipients?",
		"Build a vesting schedule where tokens are locked for 2 days. After lockup, 50% of the total tokens are released immediately, and the remaining 50% vests linearly over 10 days. All claimed tokens must auto-stake to a specific validator. Show me which ADO messages I must configure.",
		"Please create a vesting and staking app that allows partial claiming from vesting: employees can claim however many tokens they wish at a time once available. Those tokens should go to the Staking ADO for auto-staking. Include instructions for transferring the contract ownership to the employee upon completion.",
		"I need a vesting contract that supports multiple validators for staking. When each token batch is claimed, the user can choose which validator to stake to. If none is specified, it defaults to 'andrvaloper123456'. Show me how to set up the attached stake message to allow selecting a validator at claim time."
	]
}